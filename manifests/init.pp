# == Class: dirsrv
#
# This class installs and configures 389 Directory Server.
#
# Support for post-install configuration management is very limited at this 
# point:
#
# - Creating or monitoring additional Directory Server instances is not 
#   supported, although adding that support would be fairly easy
# - Creating (separate) Config Directory Server instances is not supported
# - Updating the Directory/Admin Server configuration is not supported
#
# In theory Puppet could just run "setup-ds-admin" again with the "-u" flag to 
# reconfigure some aspects of 389-ds. As doing so could potentially break the 
# installation the process is not automated at this point. Cleanup after a 
# disaster would involve lots of manual work or the complete removal of 389-ds 
# packages, files and directories.
#
# Many of the class parameters define the contents of the silent-install.inf 
# file. For details on the parameters look here:
#
# <https://access.redhat.com/documentation/en-US/Red_Hat_Directory_Server/9.0/html/Installation_Guide/Advanced_Configuration-Silent.html>
#
# Note that the the setup-ds-admin script is picky about reverse DNS lookups and 
# that you may have to setup a static entry in /etc/hosts to work around it in 
# some environments:
#
# <https://access.redhat.com/documentation/en-US/Red_Hat_Directory_Server/9.0/html/Installation_Guide/Preparing_for_a_Directory_Server_Installation-Considerations.html#Preparing_for_a_Directory_Server_Installation-Port_Number>
#
# == Parameters
#
# [*manage*]
#   Whether to manage Directory Server with Puppet or not. Valid values are 
#   true (default) and false.
# [*manage_config*]
#   Whether or not to manage Directory Server _configuration_ with Puppet. Valid 
#   values are true and false (default).
# [*manage_monit*]
#   Whether to manage monit configuration with Puppet. Valid values are
#   true and false (default).
# [*manage_packetfilter*]
#   Whether to manage iptables/ip6tables rules with Puppet. Valid values are
#   true and false (default).
# [*manage_epel*]
#   Manage EPEL using this module. Valid values are true (default) and false.
# [*serveridentifier*]
#   Identifier for the Directory Server instance. Defaults to $::hostname. Note 
#   that the identifier "can contain only alphanumeric characters and the 
#   following: #%:@_-"
# [*ldap_port*]
#   Directory Server (LDAP) port. Defaults to 389.
# [*suffix*]
#   Directory tree suffix. For example "dc=domain,dc=com". No default value.
# [*rootdn*]
#   Root DN (i.e. "Directory Manager") for the Directory Server. Defaults to 
#   'cn=Directory Manager'.
# [*rootdn_pwd*]
#   Password for the Root DN user.
# [*config_directory_ldap_url*]
#   LDAP URL of the Config Directory. The Config Directory will get generated by 
#   the setup-ds-admin script. The default value 
#   ('ldap://localhost:389/o=NetscapeRoot') should not be changed until this 
#   module supports adding new Directory Server instances that don't 
#   (necessarily) have their own local Config Directory server.
# [*config_directory_admin_id*]
#   Admin user for the Configuration Directory. Defaults to 'admin'.
# [*config_directory_admin_pwd*]
#   Password for the Configuration Directory admin user. It seems that this 
#   needs to match the value of $server_admin_pwd. No default value.
# [*admin_bind_ip*]
#   The IP-address (interface) the Admin Server should bind to. Defaults to the 
#   result of a DNS query with the node's $::fqdn, which may or may not work. If 
#   in doubt you can set this to '127.0.0.1' and change it later. Alternatively 
#   you can provision the server first, check the interface IP and manually 
#   configure this parameter to match it.
# [*admin_port*]
#   The port on which the Admin Server listens. Defaults to 9830.
# [*server_admin_id*]
#   Admin username for the Admin Server. Defaults to 'admin'.
# [*server_admin_pwd*]
#   Password for the Admin Server admin user. It seems that this needs to match 
#   the value of $config_directory_admin_pwd or the silent installer will fail. 
#   No default value.
# [*allow_anonymous_access*]
#   Level of anonymous access to allow. Valid values 'on', 'off' and 'rootdse'. 
#   Defaults to 'rootdse'.
# [*dirsrv_allow_ipv4_address*]
#   IPv4 address/subnet from which to allow connections to the Directory Server. 
#   Use 'any' for any address. Defaults to '127.0.0.1'.
# [*dirsrv_allow_ipv6_address*]
#   IPv6 address/subnet from which to allow connections to the Directory Server. 
#   Use 'any' for any address. Defaults to '::1'.
# [*dirsrv_allow_ports*]
#   Ports to open in the firewall. Defaults to [ 389, 636 ].
# [*admin_srv_allow_ipv4_address*]
#   IPv4 address/subnet from which to allow connections to the Admin Server. 
#   Use 'any' for any address. Defaults to '127.0.0.1'.
# [*admin_srv_allow_ipv6_address*]
#   IPv6 address/subnet from which to allow connections to the Admin Server. 
#   Use 'any' for any address. Defaults to '::1'.
# [*monitor_email*]
#   Email address where local service monitoring software sends it's reports to.
#   Defaults to global variable $::servermonitor.
# [*backups*]
#   A hash of dirsrv::backup resources
#
# == Authors
#
# Samuli Seppänen <samuli.seppanen@gmail.com>
#
# Samuli Seppänen <samuli@openvpn.net>
#
# == License
#
# BSD-license. See file LICENSE for details.
#
class dirsrv
(
    $suffix,
    $rootdn_pwd,
    $server_admin_pwd,
    $config_directory_admin_pwd,
    String $full_machine_name = $::fqdn,
    Boolean $manage = true,
    Boolean $manage_config = false,
    Boolean $manage_monit = false,
    Boolean $manage_packetfilter = false,
    $manage_epel = true,
    $serveridentifier = $::hostname,
    Boolean $self_sign_cert = false,
    Integer $self_sign_cert_valid_months = 24,
    $ldap_port = 389,
    $rootdn = 'cn=Directory Manager',
    $config_directory_ldap_url = 'ldap://localhost:389/o=NetscapeRoot',
    $config_directory_admin_id = 'admin',
    $admin_bind_ip = undef,
    $admin_port = 9830,
    $server_admin_id = 'admin',
    $allow_anonymous_access = 'rootdse',
    $dirsrv_allow_ipv4_address = '127.0.0.1',
    $dirsrv_allow_ipv6_address = '::1',
    $dirsrv_allow_ports = [ 389, 636 ],
    $admin_srv_allow_ipv4_address = '127.0.0.1',
    $admin_srv_allow_ipv6_address = '::1',
    $monitor_email = $::servermonitor,
    Hash $backups = {}

) inherits dirsrv::params
{
if $manage {

    class { '::dirsrv::install':
        manage_epel => $manage_epel,
    }

    if $manage_config {

        class { '::dirsrv::config':
            full_machine_name           => $full_machine_name,
            serveridentifier            => $serveridentifier,
            ldap_port                   => $ldap_port,
            suffix                      => $suffix,
            rootdn                      => $rootdn,
            rootdn_pwd                  => $rootdn_pwd,
            config_directory_ldap_url   => $config_directory_ldap_url,
            config_directory_admin_id   => $config_directory_admin_id,
            config_directory_admin_pwd  => $config_directory_admin_pwd,
            admin_bind_ip               => $admin_bind_ip,
            admin_port                  => $admin_port,
            server_admin_id             => $server_admin_id,
            server_admin_pwd            => $server_admin_pwd,
            allow_anonymous_access      => $allow_anonymous_access,
            self_sign_cert              => $self_sign_cert,
            self_sign_cert_valid_months => $self_sign_cert_valid_months,
        }
    }

    class { '::dirsrv::service':
        serveridentifier => $serveridentifier,
    }

    if $manage_monit {
        class { '::dirsrv::monit':
            serveridentifier => $serveridentifier,
            monitor_email    => $monitor_email,
        }
    }

    if $manage_packetfilter {

        class { '::dirsrv::packetfilter::dirsrv':
            allow_ipv4_address => $dirsrv_allow_ipv4_address,
            allow_ipv6_address => $dirsrv_allow_ipv6_address,
            allow_ports        => $dirsrv_allow_ports,
        }

        class { '::dirsrv::packetfilter::admin':
            allow_ipv4_address => $admin_srv_allow_ipv4_address,
            allow_ipv6_address => $admin_srv_allow_ipv6_address,
            port               => $admin_port,
        }
    }

    # Create dirsrv::backup resources
    create_resources('dirsrv::backup', $backups)
}
}
